?mean
# setup
graphics.off()
rm(list=ls())
library(tidyverse)
#2. exploring the flights tibble
head(flights)
# Part 1 - Exploring the data
#1. load the nycflights dataset
flights <- nycflights13::flights
#2. exploring the flights tibble
head(flights)
# setup
graphics.off()
rm(list=ls())
library(tidyverse)
# Part 1 - Exploring the data
#1. load the nycflights dataset
flights <- as_tibble(nycflights13::flights)
#2. exploring the flights tibble
head(flights)
#3. sorting the tibble by departure delay in descending order
flights <- flights |>
arrange(dep_delay)
head(flights)
# Part 2 - Summarising the data
#4. identify avg departure delay for carriers. Save results in d and drop na values using mean function arguments
d <- flights |>
group_by(carrier) |>
summarize(ave_dep_delay = mean(dep_delay))
view(d)
# Part 2 - Summarising the data
#4. identify avg departure delay for carriers. Save results in d and drop na values using mean function arguments
d <- flights |>
group_by(carrier) |>
summarize(ave_dep_delay = mean(dep_delay, na.rm = TRUE))
view(d)
# Part 2 - Summarising the data
#4. identify avg departure delay for carriers. Save results in d and drop na values using mean function arguments
d <- flights |>
group_by(carrier) |>
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
#5. sorting d by departure delay in ascending order
d <- d |>
arrange(desc(avg_dep_delay))
view(d)
# Part 3 - Joining and slicing
#6. explorng tibble carriers part of flights13
library(flights13)
# Part 3 - Joining and slicing
#6. exploring tibble planes part of flights13
planes <- nycflights13::planes
head(planes)
# Part 3 - Joining and slicing
#6. exploring tibble planes part of flights13
airlines <- nycflights13::airlines
head(airlines)
?left_join
#7. Using left_join to join d and planes airline names should now be in d
d <- left_join(d, airlines, by=join_by(carrier)) |>
relocate(name, .before = avg_dep_delay)
head(d)
?slice_max
#8. using slice_max() to extract the row with the largest departure delay value
d |> slice_max(avg_dep_delay) |> view()
#9. storing the result from 8 in d_worst
d <- d |>
slice_max(avg_dep_delay)
# setup
graphics.off()
rm(list=ls())
library(tidyverse)
# Part 1 - Exploring the data
#1. load the nycflights dataset
flights <- as_tibble(nycflights13::flights)
#2. exploring the flights tibble
head(flights)
#3. sorting the tibble by departure delay in descending order
flights <- flights |>
arrange(dep_delay)
head(flights)
# Part 2 - Summarising the data
#4. identify avg departure delay for carriers. Save results in d and drop na values using mean function arguments
d <- flights |>
group_by(carrier) |>
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
#5. sorting d by departure delay in ascending order
d <- d |>
arrange(desc(avg_dep_delay))
# Part 3 - Joining and slicing
#6. exploring tibble planes part of flights13
airlines <- nycflights13::airlines
head(airlines)
#7. Using left_join to join d and planes airline names should now be in d
d <- left_join(d, airlines, by=join_by(carrier)) |>
relocate(name, .before = avg_dep_delay)
#8. using slice_max() to extract the row with the largest departure delay value
d |> slice_max(avg_dep_delay) |> view()
#9. storing the result from 8 in d_worst
d_worst <- d |>
slice_max(avg_dep_delay)
view(d_wor)
view(d_worst)
?as_factor
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum)) |>
mutate(engines = as_factor(engines))
view(plane_flights[1:10,])
plane_flights |> select(engines) |> class()
class(plane_flights$engines)
class(plane_flights[,"engines"])
class(as_vector(plane_flights[,"engines"]))
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum)) |>
mutate(engines = as_factor(engines)) |>
rename(year.x = flight_year, year.y = model_year)
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum)) |>
mutate(engines = as_factor(engines)) |>
rename(year.x = flight_year, year.y = model_year)
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum)) |>
mutate(engines = as_factor(engines)) |>
rename(flight_year = year.x, year.y = model_year)
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum)) |>
mutate(engines = as_factor(engines)) |>
rename(flight_year = year.x, model_year = year.y)
# setup
graphics.off()
rm(list=ls())
library(tidyverse)
# Part 1 - Exploring the data
#1. load the nycflights dataset
flights <- as_tibble(nycflights13::flights)
#2. exploring the flights tibble
head(flights)
#3. sorting the tibble by departure delay in descending order
flights <- flights |>
arrange(dep_delay)
head(flights)
# Part 2 - Summarising the data
#4. identify avg departure delay for carriers. Save results in d and drop na values using mean function arguments
d <- flights |>
group_by(carrier) |>
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
#5. sorting d by departure delay in ascending order
d <- d |>
arrange(desc(avg_dep_delay))
# Part 3 - Joining and slicing
#6. exploring tibble planes part of flights13
airlines <- nycflights13::airlines
head(airlines)
#7. Using left_join to join d and planes airline names should now be in d
d <- left_join(d, airlines, by=join_by(carrier)) |>
relocate(name, .before = avg_dep_delay)
#8. using slice_max() to extract the row with the largest departure delay value
d |> slice_max(avg_dep_delay) |> view()
#9. storing the result from 8 in d_worst
d_worst <- d |>
slice_max(avg_dep_delay)
view(d_worst)
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum)) |>
mutate(engines = as_factor(engines)) |>
rename(flight_year = year.x, model_year = year.y)
view(plane_flights[1:10,])
view(avg_dep_delay_month[1:10,])
#12. calculate the average dep_delay per month
avg_dep_delay_month <- plane_flights |>
group_by(month) |>
sumamrize(avg_dep_delay = mean(dep_delay))
#12. calculate the average dep_delay per month
avg_dep_delay_month <- plane_flights |>
group_by(month) |>
summarize(avg_dep_delay = mean(dep_delay))
view(avg_dep_delay_month[1:10,])
#12. calculate the average dep_delay per month
avg_dep_delay_month <- plane_flights |>
drop_na(dep_delay) |>
group_by(month) |>
summarize(avg_dep_delay = mean(dep_delay))
view(avg_dep_delay_month[1:10,])
view(plane_flights[1:14,])
#12. calculate the average dep_delay per month
avg_dep_delay_month <- plane_flights |>
drop_na(dep_delay) |>
group_by(month) |>
summarize(avg_dep_delay = mean(dep_delay))
view(avg_dep_delay_month[1:14,])
view(avg_dep_delay_month)
#13. creating a stacked bar plot with month(x), dep_delay(y) and where bar segments are color coded
# according to the portion of the mean delay attributable to different engine counts
avg_delay_monthandengine <- plane_flights |>
drop_na(engines, dep_delay) |>
group_by(month,engines) |>
summarize(avg_delay = mean(dep_delay))
view(avg_delay_monthandengine)
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_bar()
graph
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_bar(stat = "identity")
graph
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col()
graph
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine")
graph
view(avg_delay_monthandengine)
view(avg_delay_monthandengine |> arrange(desc(avg_delay)))
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine") +
scale_y_continuous(breaks=c(0,40,80), limits = c(-20,80))
graph
#13. creating a stacked bar plot with month(x), dep_delay(y) and where bar segments are color coded
# according to the portion of the mean delay attributable to different engine counts
avg_delay_monthandengine <- plane_flights |>
drop_na(engines, dep_delay, month) |>
group_by(month,engines) |>
summarize(avg_delay = mean(dep_delay))
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine") +
scale_y_continuous(breaks=c(0,40,80), limits = c(-20,100))
graph
# setup
graphics.off()
rm(list=ls())
library(tidyverse)
# Part 1 - Exploring the data
#1. load the nycflights dataset
flights <- as_tibble(nycflights13::flights)
#2. exploring the flights tibble
head(flights)
#3. sorting the tibble by departure delay in descending order
flights <- flights |>
arrange(dep_delay)
head(flights)
# Part 2 - Summarising the data
#4. identify avg departure delay for carriers. Save results in d and drop na values using mean function arguments
d <- flights |>
group_by(carrier) |>
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
#5. sorting d by departure delay in ascending order
d <- d |>
arrange(desc(avg_dep_delay))
# Part 3 - Joining and slicing
#6. exploring tibble planes part of flights13
airlines <- nycflights13::airlines
head(airlines)
#7. Using left_join to join d and planes airline names should now be in d
d <- left_join(d, airlines, by=join_by(carrier)) |>
relocate(name, .before = avg_dep_delay)
#8. using slice_max() to extract the row with the largest departure delay value
d |> slice_max(avg_dep_delay) |> view()
#9. storing the result from 8 in d_worst
d_worst <- d |>
slice_max(avg_dep_delay)
view(d_worst)
# Part 4 - How many engines?
#10. joining flights and planes using tailnum as key
plane_flights <- left_join(flights, nycflights13::planes, by=join_by(tailnum))
#11. mutating the engines column into a factor using as_factor()
plane_flights <- plane_flights |> mutate(engines = as_factor(engines))
#12. calculate the average dep_delay per month
avg_dep_delay_month <- plane_flights |>
drop_na(dep_delay) |>
group_by(month) |>
summarize(avg_dep_delay = mean(dep_delay))
view(avg_dep_delay_month)
#13. creating a stacked bar plot with month(x), dep_delay(y) and where bar segments are color coded
# according to the portion of the mean delay attributable to different engine counts
avg_delay_monthandengine <- plane_flights |>
drop_na(dep_delay, month) |>
group_by(month,engines) |>
summarize(avg_delay = mean(dep_delay))
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine") +
scale_y_continuous(breaks=c(0,40,80), limits = c(-20,100))
graph
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine") +
scale_y_continuous(breaks=c(0,40,80), limits = c(-20,150))
graph
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine") +
scale_y_continuous(breaks=c(0,40,80))
graph
graph <- avg_delay_monthandengine |>
ggplot(aes(month, avg_delay, fill = engines)) +
geom_col() +
labs(x="month", y="Mean departure delay (mins)", title = "Average departure delay by month and engine")
graph
?list()
?ls
#initializing environment
graphics.off()
rm(list=ls())
library(tidyverse)
#### 1. Aesthetics ####
# Color
ggplot(mpg, aes(displ,hwy, colour = class, alpha =trans))+
geom_point()
#### 1. Aesthetics ####
# Color
ggplot(mpg, aes(displ,hwy, colour = class, alpha = hwy))+
geom_point()
?mpg
# Shape
ggplot(mpg, aes(displ,hwy, shape=drv))+
geom_point()
#### 1. Aesthetics ####
# Color
ggplot(mpg, aes(displ,hwy, colour = class, alpha = hwy))+
geom_point(size=3)
# Shape
ggplot(mpg, aes(displ,hwy, shape=drv))+
geom_point(size=3)
# Size
ggplot(mpg, aes(displ,hwy, size=drv))+
geom_point()
# Size
ggplot(mpg, aes(displ,hwy, size=cyl))+
geom_point()
# Alpha Transparency
ggplot(faithful, aes(waiting,eruptions, alpha = density))+
geom_raster(fill="maroon"))
# Alpha Transparency
ggplot(faithful, aes(waiting,eruptions, alpha = density))+
geom_raster(fill="maroon")
# Alpha Transparency
ggplot(faithfuld, aes(waiting,eruptions, alpha = density))+
geom_raster(fill="maroon")
# Line Type
ggplot(diamonds, aes(x=depth, fill=cut, colour=cut, linetype=cut)) +
geom_density(alpha = 0.2, na.rm = TRUE) +
xlim(58,68) +
labs(title="Distribution (Kernel Density Estimate) of diamonds dataset")
# Line Type
ggplot(diamonds, aes(x=depth, fill=cut, colour=cut, linetype=cut)) +
geom_point(alpha = 0.2, na.rm = TRUE) +
xlim(58,68) +
labs(title="Distribution (Kernel Density Estimate) of diamonds dataset")
density
density
# Line Type
ggplot(diamonds, aes(x=depth, fill=cut, colour=cut, linetype=cut)) +
geom_density(alpha = 0.2, na.rm = TRUE) +
xlim(58,68) +
labs(title="Distribution (Kernel Density Estimate) of diamonds dataset")
# coding challenge 1
ggplot(mpg, aes(x = displ, y = hwy, )) +
geom_point( size = 2) +
facet_wrap(vars(class), ncol = 2)
# coding challenge 1
ggplot(mpg, aes(x = displ, y = hwy, )) +
geom_point( size = 2) +
facet_wrap(vars(class))
?vars
# coding challenge 1
ggplot(mpg, aes(x = displ, y = hwy, )) +
geom_point( size = 2) +
facet_wrap(vars(cty))
head(mph)
head(mpg)
#### 3. Individual geoms ####
d <- tibble(
x = c(2,7,5,12),
y = c(4.2, 9.7, 6.1, 8),
label = c("a", "b", "c", "d")
)
ggplot(d, aes(x = x, y = y, label = label )) +
labs(x=NULL, y = NULL) + # hide axis label
theme(plot.title = element_text(size = 12))
p1 <- p + geom_point() + ggtitle("point")
d <- tibble(
x = c(2,7,5,12),
y = c(4.2, 9.7, 6.1, 8),
label = c("a", "b", "c", "d")
)
p <- ggplot(d, aes(x = x, y = y, label = label )) +
labs(x=NULL, y = NULL) + # hide axis label
theme(plot.title = element_text(size = 12))
p1 <- p + geom_point() + ggtitle("point")
p2 <- p + geom_text() + ggtitle("text")
p3 <- p + geom_bar(stat = "identity") + ggtitle("bar")
p4 <- p + geom_title() + ggtitle("raster")
p4 <- p + geom_tile() + ggtitle("raster")
p5 <- p + geom_line() + ggtitle("line")
p6 <- p + geom_area() + ggtitle("area")
p7 <- p + geom_path() + ggtitle("line")
p8 <- p + geom_plygon() + ggtitle("polygon")
p1
p2
p1
d <- tibble(
x = c(2,7,5,12),
y = c(4.2, 9.7, 6.1, 8),
label = c("a", "b", "f", "d")
)
p <- ggplot(d, aes(x = x, y = y, label = label )) +
labs(x=NULL, y = NULL) + # hide axis label
theme(plot.title = element_text(size = 12))
p1 <- p + geom_point() + ggtitle("point")
p2 <- p + geom_text() + ggtitle("text")
p3 <- p + geom_bar(stat = "identity") + ggtitle("bar")
p4 <- p + geom_tile() + ggtitle("raster")
p5 <- p + geom_line() + ggtitle("line")
p6 <- p + geom_area() + ggtitle("area")
p7 <- p + geom_path() + ggtitle("line")
p8 <- p + geom_plygon() + ggtitle("polygon")
p8 <- p + geom_polygon() + ggtitle("polygon")
p1
p2
d <- tibble(
x = c(2,7,5,12),
y = c(4.2, 9.7, 6.1, 8),
label = c("a", "b", "c", "d")
)
p <- ggplot(d, aes(x = x, y = y, label = label )) +
labs(x=NULL, y = NULL) + # hide axis label
theme(plot.title = element_text(size = 12))
p1 <- p + geom_point() + ggtitle("point")
p2 <- p + geom_text() + ggtitle("text")
p3 <- p + geom_bar(stat = "identity") + ggtitle("bar")
p4 <- p + geom_tile() + ggtitle("raster")
p5 <- p + geom_line() + ggtitle("line")
p6 <- p + geom_area() + ggtitle("area")
p7 <- p + geom_path() + ggtitle("line")
p8 <- p + geom_polygon() + ggtitle("polygon")
p1
p2
p3
p4
p5
p6
p7
p8
p5 <- p + geom_line() + ggtitle("line") + ylim(c(0,10))
p5
p5 <- p + geom_line() + ggtitle("line") + ylim(c(0,10)) + xlim(c(0,10))
p5
p5 <- p + geom_line() + ggtitle("line")
p5
p5 <- p + geom_line() + ggtitle("line") + ylim(c(0,10)) + xlim(c(0,10))
p5
p5 <- p + geom_line() + ggtitle("line") + ylim(c(0,10)) + xlim(c(-1,10))
p5
p5 <- p + geom_line() + ggtitle("line")
p5
p7 <- p + geom_path() + ggtitle("line")
p5 <- p + geom_line() + ggtitle("line")
p6 <- p + geom_area() + ggtitle("area")
p7 <- p + geom_path() + ggtitle("line")
p5
p5 <- p + geom_line() + ggtitle("line") + xlim(c(0,5))
p5
p5 <- p + geom_line() + ggtitle("line") + xlim(c(0,10))
p5
p5 <- p + geom_line() + ggtitle("line") + ylim(c(0,10)) + xlim(c(0,10))
p5
p5
p5 <- p + geom_line() + ggtitle("line") + ylim(c(0,10)) + xlim(c(0,13))
p5
p5 <- p + geom_line() + ggtitle("line")
p5
